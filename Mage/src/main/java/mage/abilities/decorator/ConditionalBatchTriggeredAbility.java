package mage.abilities.decorator;

import mage.abilities.BatchTriggeredAbility;
import mage.abilities.condition.Condition;
import mage.game.Game;
import mage.game.events.GameEvent;

import java.util.stream.Stream;

/**
 * Same as ConditionalTriggeredAbility, but for batch triggers.
 *
 * @author Susucr
 */
public class ConditionalBatchTriggeredAbility<T extends GameEvent> extends ConditionalTriggeredAbility implements BatchTriggeredAbility<T> {

    private final BatchTriggeredAbility<T> ability;

    /**
     * Triggered ability with a condition. Set the optionality for the trigger
     * ability itself.
     *
     * @param ability
     * @param condition
     * @param text      explicit rule text for the ability, if null or empty, the
     *                  rule text generated by the triggered ability itself is used.
     */
    public ConditionalBatchTriggeredAbility(BatchTriggeredAbility<T> ability, Condition condition, String text) {
        super(ability, condition, text);
        this.ability = ability;
    }

    protected ConditionalBatchTriggeredAbility(final ConditionalBatchTriggeredAbility triggered) {
        super(triggered);
        this.ability = triggered.ability.copy();
    }

    @Override
    public ConditionalBatchTriggeredAbility copy() {
        return new ConditionalBatchTriggeredAbility(this);
    }

    @Override
    public Stream<T> filterBatchEvent(GameEvent event, Game game) {
        return ability.filterBatchEvent(event, game);
    }
}
